# Workflow for Bandit code scan and blocking pull requests
name: Bandit Security Scan

on:
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install bandit

      # Run Bandit scan
      - name: Run Bandit Scan
        id: bandit
        run: |
          bandit_result=$(bandit -r . --format json || true)
          echo "::set-output name=bandit_result::$bandit_result"

      # Check Bandit results and block PR if critical or above vulnerabilities found
      - name: Check Bandit Results
        run: |
          echo "${{ steps.bandit.outputs.bandit_result }}"
          # Parse Bandit results and check for critical or above vulnerabilities
          # If critical or above vulnerabilities found, block the pull request
          # For example:
          # flag=$(echo "${{ steps.bandit.outputs.bandit_result }}" | jq -r '.results[] | select(.issue_severity >= "HIGH") | .issue_text' || true)
          # if [ -n "$flag" ]; then
          #   echo "Blocking pull request due to critical or above vulnerabilities"
          #   # Add a comment to the pull request
          #   # Use GitHub API to add comment: https://docs.github.com/en/rest/reference/issues#create-an-issue-comment
          #   # Block the pull request
          #   # Use GitHub API to close or block the pull request: https://docs.github.com/en/rest/reference/pulls#update-a-pull-request
          # fi

# Workflow for SBOM generation and reporting on merge
name: SBOM and Dependency Scan on Merge

on:
  pull_request:
    types: [closed]
  push:
    branches:
      - main

jobs:
  generate_sbom:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Setup Python (if needed)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      # Install dependencies (if needed)
      - name: Install Dependencies
        run: pip install -r requirements.txt

      # Generate SBOM (replace command with actual SBOM generation tool)
      - name: Generate SBOM
        run: |
          # Generate SBOM using CycloneDX or SPDX (replace command with actual tool and options)
          # For example:
          # cyclonedx-bom --output-format json --output-file sbom.json

      # Upload SBOM as artifact
      - name: Upload SBOM Report
        uses: actions/upload-artifact@v2
        with:
          name: sbom_report
          path: sbom.json
